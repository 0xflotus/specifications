collection_name: &collection_name "test"
database_name: &database_name "change-stream-tests"
collection_name_2: &collection_name_2 "test2"
database_name_2: &database_name_2 "change-stream-tests-2"
tests:
  -
    description: The watch helper must not throw a custom exception when executed against a single server topology, but instead depend on a server error
    minServerVersion: "3.6.0"
    target: collection
    numChanges: 1
    topology:
      - single
    operations: []
    expectations: []
    result:
      error:
        errmsg: The $changeStream stage is only supported on replica sets
        code: 40573
  -
    description: "`$changeStream` must be the first stage in a change stream pipeline sent to the server"
    minServerVersion: "3.6.0"
    target: collection
    numChanges: 1
    topology: 
      - replicaset
    operations:
      -
        database: *database_name
        collection: *collection_name
        commandName: insert
        arguments:
          - { x: 1 }
    expectations:
      - 
        command_started_event:
          command:
            aggregate: *collection_name
            pipeline:
              - {$changeStream: {}}
          command_name: aggregate
          database_name: *database_name
    result: {}
  -
    description: The server returns change stream responses in the specified ``ServerResponse`` format
    minServerVersion: "3.6.0"
    target: collection
    numChanges: 1
    topology:
      - replicaset
    operations:
      -
        database: *database_name
        collection: *collection_name
        commandName: insert
        arguments:
          - { x: 1 }
    expectations: []
    result:
      success:
        -
          _id: {}
          documentKey: {}
          operationType: insert
          ns:
            db: *database_name
            coll: *collection_name
          fullDocument:
            x:
              $numberInt: "1"
  -
    description: Executing a `watch` helper on a Collection results in notifications for changes to the specified collection
    minServerVersion: "3.6.0"
    target: collection
    numChanges: 1
    topology:
      - replicaset
    operations:
      -
        database: *database_name
        collection: *collection_name_2
        commandName: insert
        arguments:
          - { x: 1 }
      -
        database: *database_name_2
        collection: *collection_name
        commandName: insert
        arguments:
          - { y: 2 }
      -
        database: *database_name
        collection: *collection_name
        commandName: insert
        arguments:
          - { z: 3 }
    expectations:
      - 
        command_started_event:
          command:
            aggregate: *collection_name
            pipeline:
              - {$changeStream: {}}
          command_name: aggregate
          database_name: *database_name
    result:
      -
        success:
          operationType: insert
          ns:
            db: *database_name
            coll: *collection_name
          fullDocument:
            z: 3
  -
    description:  A fresh ChangeStream against a server >=4.0 will always include `startAtClusterTime` in the `$changeStream` stage.
    minServerVersion: "3.7.3"
    target: collection
    numChanges: 1
    topology:
      - replicaset
    operations:
      -
        database: *database_name
        collection: *collection_name
        commandName: insert
        arguments:
          - { x: 1 }
    expectations:
      - 
        command_started_event:
          command:
            aggregate: *collection_name
            pipeline:
              - 
                $changeStream:
                  startAtClusterTime: {}
          command_name: aggregate
          database_name: *database_name
    result: {}
  -
    description: Executing a `watch` helper on a Database results in notifications for changes to all collections in the specified database.
    minServerVersion: "3.7.3"
    target: db
    numChanges: 2
    topology:
      - replicaset
    operations:
      -
        database: *database_name
        collection: *collection_name_2
        commandName: insert
        arguments:
          - { x: 1 }
      -
        database: *database_name_2
        collection: *collection_name
        commandName: insert
        arguments:
          - { y: 2 }
      -
        database: *database_name
        collection: *collection_name
        commandName: insert
        arguments:
          - { z: 3 }
    expectations:
      -
        command_started_event:
          command:
            aggregate:
              $numberInt: "1"
            pipeline:
              - 
                $changeStream:
                  startAtClusterTime: {}
          command_name: aggregate
          database_name: *database_name
    result:
      success:
        -
          operationType: insert
          ns:
            db: *database_name
            coll: *collection_name_2
          fullDocument:
            x:
              $numberInt: "1"
        -
          operationType: insert
          ns:
            db: *database_name
            coll: *collection_name
          fullDocument:
            z:
              $numberInt: "3"
  -
    description: Executing a `watch` helper on a MongoClient results in notifications for changes to all collections in all databases in the cluster.
    minServerVersion: "3.7.3"
    target: client
    numChanges: 3
    topology:
      - replicaset
    operations:
      -
        database: *database_name
        collection: *collection_name_2
        commandName: insert
        arguments:
          - { x: 1 }
      -
        database: *database_name_2
        collection: *collection_name
        commandName: insert
        arguments:
          - { y: 2 }
      -
        database: *database_name
        collection: *collection_name
        commandName: insert
        arguments:
          - { z: 3 }
    expectations:
      -
        command_started_event:
          command:
            aggregate:
              $numberInt: "1"
            pipeline:
              - 
                $changeStream:
                  allChangesForCluster: true
                  startAtClusterTime:
                    ts:
                      $timestamp: {}
          command_name: aggregate
          database_name: admin
    result:
      success:
        -
          operationType: insert
          ns:
            db: *database_name
            coll: *collection_name_2
          fullDocument:
            x:
              $numberInt: "1"
        -
          operationType: insert
          ns:
            db: *database_name_2
            coll: *collection_name
          fullDocument:
            y:
              $numberInt: "2"
        -
          operationType: insert
          ns:
            db: *database_name
            coll: *collection_name
          fullDocument:
            z:
              $numberInt: "3"
