#!/usr/bin/env python3

import argparse, json, os, signal, subprocess, time

TOPOLOGIES = {}

with open('replset.json') as replset:
    TOPOLOGIES['replset'] = json.load(replset)

def parse_arguments():
    '''Parse the command-line arguments passed to the script and return the args object.'''
    parser = argparse.ArgumentParser(description='Live Failure Testing Script')
    parser.add_argument(
        'topology',
        choices={ 'replset', 'sharded' },
        help='which topology to use for the scenario')
    parser.add_argument(
       '--agent-config',
       default='agent-config.json',
       help='location of the config file to be used by the automation agent')
    parser.add_argument(
        '--agent-log',
        default='agent.log',
        help="location of the automation agent's log file")
    parser.add_argument(
        '--sleep',
        type=int,
        default=3,
        help='duration (in seconds) to sleep between node restarts')
    parser.add_argument(
        '--tombstone-file',
        help='create a tombstone file at the given path upon completion of the scenario')
    
    return parser.parse_args()
    
def goal_state_message(num_processes):
    '''Helper to construct the automation agent log string indicating that topology updates have 
       finished.'''
    return f"All {num_processes} Mongo processes are in goal state"
    
def update_topology(topology, agent_config):
    '''Writes the topology to the agent config file, which will cause the automation agent to make
       any changes as necessary.'''
    with open(agent_config, 'w') as agent_file:
        json.dump(topology, agent_file)

def wait_for_agent_goal_state(agent_log, num_processes, msg, start_from=0):
    '''Wait for the automation agent to reach the goal state and returns the point in 
       the file to resume from the next time this function is called.'''

    goal_state = goal_state_message(num_processes)
    curr_loc = start_from
    
    while True:
        print(msg)
        
        with open(agent_log) as log_file:
            log_file.seek(curr_loc)

            new_content = log_file.read()
            curr_loc = log_file.tell()
            
            if goal_state in new_content:
                break            
            
        time.sleep(2)
                
    return curr_loc
    
def start_automation_agent(agent_config, agent_log, topology):
    '''Initialize the automation agent and wait for the initial topology to be ready.
       
       Returns the automation agent PID and the location in the agent log file to
       resume from.'''
       
    print('Launching the automation agent...')
    
    update_topology(topology, agent_config)
    
    with open(agent_log, 'a') as log_file:
        pid = subprocess.Popen(
                    ['mongodb-mms-automation-agent', '-cluster', agent_config], 
                    stdout=log_file,
                    stderr=subprocess.STDOUT).pid
            
    resume_from = wait_for_agent_goal_state(
                      agent_log, 
                      len(topology['processes']), 
                      'Waiting for cluster to come online...')
    
    return pid, resume_from
    
def restart_node(sleep, agent_config, agent_log, topology, resume_from, i):
    '''Performs a restart on node i in the cluster by writing to the automation config. The function
       will sleep for the given duration before and after disabling the node.
       
       When the function returns, the node will have been fully restarted, so the topology is back
       to the same state it was in when the function was called.
       
       Returns the point in the log file to resume from.'''
    process = topology['processes'][i] 
    
    time.sleep(sleep)
    
    process['disabled'] = True
    update_topology(topology, agent_config)
    resume_from = wait_for_agent_goal_state(
                      agent_log, 
                      len(topology['processes']), 
                      f"shutting down node #{i}...", 
                      resume_from)
                    
    time.sleep(sleep) 
    
    del process['disabled']
    update_topology(topology, agent_config)
    resume_from = wait_for_agent_goal_state(
                      agent_log,
                      len(topology['processes']),
                      f"starting up node #{i}...",
                      resume_from)
                      
    return resume_from
        
    
def restart_each_node(sleep, agent_config, agent_log, topology, resume_from):
    '''Restarts each node in the cluster individually (with sleeps for the given duration 
       interleaved) and returns the point in the log file to resume from.'''
    for i in range(len(topology['processes'])):
        resume_from = restart_node(sleep, agent_config, agent_log, topology, resume_from, i)                   
    
    time.sleep(sleep)
                        
    return resume_from
    
def kill_and_wait(pid):
    '''Kills the subprocess with the given pid and waits for it to terminate.'''
    os.kill(pid, signal.SIGINT)
    
    while True:
        finished_pid, _ = os.wait()
        
        if finished_pid == pid:
            return
            
        time.sleep(2)
 

def finish(agent_pid, agent_config, agent_log, topology, resume_from, tombstone_file):
    '''Perform final cleanup steps and create the tombstone file if necessary.'''
    
    print('Scenario complete.')
    
    for process in topology['processes']:
        process['disabled'] = True
    
    update_topology(topology, agent_config) 
    wait_for_agent_goal_state(
        agent_log,
        len(topology['processes']),
        'Waiting for cluster to shut down...',
        start_from=resume_from)

    print('Killing the automation agent.')
    kill_and_wait(agent_pid)
   
    os.remove(agent_log)
    os.remove(agent_config)
    
    if tombstone_file:
        with open(tombstone_file, 'w') as f:
            f.write('Scenario completed')
    
def main():
    args = parse_arguments()

    topology = TOPOLOGIES[args.topology]
    agent_pid, resume_from = start_automation_agent(args.agent_config, args.agent_log, topology)
    resume_from = restart_each_node(
                    args.sleep, 
                    args.agent_config, 
                    args.agent_log, 
                    topology, 
                    resume_from)
    
    finish(agent_pid, args.agent_config, args.agent_log, topology, resume_from, args.tombstone_file)
    
    
main()